################################
# System-specific configuration

JDK6_HOME=/Library/Java/JavaVirtualMachines/1.6.0_65-b14-462.jdk/Contents/Home/
JDK7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_71.jdk/Contents/Home/
JDK8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/

################################










################################
# grep aliases
alias g='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
################################



################################
# less' stuff

# highlight support for less (requires source-highlight to be brew installed)
export LESSOPEN="| /usr/local/bin/src-hilite-lesspipe.sh %s"
export LESS=' -R '

alias les='less -S'

lest () { for f in `ls -tAp1 | grep -v "/$" | head -n ${1:-1}` ;do less -S "$f" ;done ; }
################################



################################
# some ls aliases
alias ls='ls -G' # color, the GNU way. The BSD way (non-GNU coreutils) is 'ls -G'
alias ll='ls -alFG'
alias la='ls -AG'
alias l='ls -CFG'
llth () {
  [ -z "$1" ] && {
    ll -t      | head -n 20
  } || {
    ll -t "$1" | head -n 20
  }
}
################################



################################
# Directory handling

alias ..='cd ..'
alias rmrf='rm -rf'

# move up directories quickly
up ()
{
  [ "$#" -eq 1 -a "$1" -gt 0 ] || { echo 'Usage: up <number of directories up>'; return 1; }

  up=""
  for (( i = 1; i <= $1; i++));
  do 
    up="$up../"
  done
  cd $up 
}

mkd() {
  mkdir "$1" &&
  cd "$1"
}
################################



################################
# some git/tig aliases/functions

alias hlog='git log --date-order --all --graph --format="%C(green)%H %Creset%C(yellow)%an%Creset %C(blue bold)%ar%Creset %C(red bold)%d%Creset %s"'
function hlogh() { hlog $@ | head; }

alias xlog='git log --date-order --graph --format="%C(green)%h %Creset%C(yellow)%an%Creset %C(blue bold)%ar%Creset %C(red bold)%d%Creset %s"'
function xlogh() { xlog $@ | head; }

alias g-co='git checkout'
alias g-co-pr='git checkout @{-1}'
alias g-cm='git commit'
alias g-cm-a='git commit --amend'
alias g-df='git diff --color-words'
alias g-pl='git pull'
alias g-ps='git push --follow-tags'
alias g-sh='git show --color-words'
alias g-st='git stash'
alias g-st-p='git stash pop'
alias g-mg='git merge'

g-cl() {
  local REPO_URL="$1"
  local REPO_BASENAME=`echo $REPO_URL | egrep -o '[^/.]*\.git$' | egrep -o '^[^.]*'`
  local FOLDER="${2:-$REPO_BASENAME}"

  git clone "$REPO_URL" "$FOLDER" && cd "$FOLDER"
}

g-cherry-to() {
  git checkout "$2" &&
  git cherry-pick "$1" &&
  g-co-pr
}

g-cpick-last-to() {
  local TARGET_BRANCH="$1"
  local LAST_HASH=`git log --date-order --format="%H" | head -n 1`
  local LAST_SUBJ="`git log --date-order --format="%s" | head -n 1`"

  g-cherry-to $LAST_HASH "$TARGET_BRANCH"
  local RESULT=$?
  
  [ $RESULT ] && echo -e "\n Cherry-picked commit \033[0;32m $LAST_SUBJ \033[0m to branch \033[0;32m $TARGET_BRANCH\033[0m\n"
  return $RESULT
}

alias t-s='tig status'
################################



################################
# some gradle aliases

alias gr='./gradlew --daemon'
alias gr-b='./gradlew --daemon build'
alias gr-bl='./gradlew --daemon build && ls -l build/libs'
alias gr-e='./gradlew --daemon eclipse'
alias gr-i='./gradlew --daemon idea'
alias gr-di='./gradlew --daemon dependencyInsight --dependency'
alias gr-ob='open build.gradle'

# pt-specific
alias gr-pv='./gradlew printVersion'

################################



################################
# npm
alias ns='npm start'
alias ni='npm install'
################################



################################
# search commands

function f()   {	find . -iname "*$1*"; }
function fll() { find . -iname "*$1*" -exec ls -ld {} \; ; }

mdf() { mdfind -onlyin . 'kMDItemTextContent == "'$1'"' }
mdfx() { 
  PATTERN=$1 ; shift
  if [ $# -gt 0 ]; then
    mdfind -onlyin . 'kMDItemTextContent == "'$PATTERN'"' | xargs $@
  else
    mdfind -onlyin . 'kMDItemTextContent == "'$PATTERN'"' | xargs open
  fi
}
mag() { mdfx $1 ag $1 }
################################



################################
# commands on list files

function fnddups() { cat $@ | sort | uniq -d; }

################################



################################
# Java symlinking


JDK_SYMLINK_PATH="${HOME}/java_home"

function relink_java_home() { rm -rf "$JDK_SYMLINK_PATH"; ln -s "$JAVA_HOME" "$JDK_SYMLINK_PATH"; }
function jdk6() { export JAVA_HOME="$JDK6_HOME"; relink_java_home; }
function jdk7() { export JAVA_HOME="$JDK7_HOME"; relink_java_home; }
function jdk8() { export JAVA_HOME="$JDK8_HOME"; relink_java_home; }


export JAVA_HOME="$JDK_SYMLINK_PATH"
#relink_java_home
export PATH=$JDK_SYMLINK_PATH/bin:$PATH

################################




################################
# python

alias pym='python -m '

pymh() {
  python -m $1 -h
  echo
  echo 'For more details, try running:'
  echo "pydoc $1"
}

alias webserve='python -m SimpleHTTPServer'


################################



################################
# misc

alias c='clear'

print_bar() {
  tput setab 2 &&
  for i in $(eval echo "{1..$(tput cols)}") ;do
    echo -n " "
  done
  tput sgr0
}

notify() {
  local TITLE="$1"
  local BODY="$2"
  local OPTIONAL_PHRASE="$3"
  local SOUND=/System/Library/Sounds/Ping.aiff

  print_bar

  /usr/bin/osascript -e "display notification \"$BODY\" with title \"$TITLE\""
  [ -n "$OPTIONAL_PHRASE" ] && say "$OPTIONAL_PHRASE" || /usr/bin/afplay "$SOUND" # it should be able to append just ' sound name \"Ping\"' to the command above, but it doesn't work.
}

alias dutop='du -d 1 | sort -nr | head | cut -f 2 | xargs -I Q du -h -d 0 Q'

alias wg='wget --no-check-certificate'

# Utility function to make random passwords
# from http://www.cyberciti.biz/faq/linux-random-password-generator/
genpasswd() {
  local len=$1
  if [[ $len == "" ]]; then
    len=16
  fi
  bash -c 'LC_CTYPE=C tr -dc "[:upper:][:lower:][:digit:]_" < /dev/urandom | head -c ${len} | xargs'
}

# Utility function to open the specified port
openport() {
  echo sudo iptables -A INPUT -p tcp --dport $1 -j ACCEPT
  sudo iptables -A INPUT -p tcp --dport $1 -j ACCEPT
}

sleep2() {
  SECS=$1
  while (( $SECS > 0 )) ;do
    echo -ne "countdown: $SECS seconds\033[O\r" >&2
    sleep 1
    (( SECS-- ))
  done
}

my_backup() {
  echo "Running   rsync -av --delete --progress \"$1\" \"$2\""
  echo ...
  rsync -av --delete --progress "$1" "$2"
}

shacheck() {
  cat "$1.sha1" && echo && shasum "$1"
}

alias strace=dtruss

__opn_internal () {
  local FIND_CMD="$1"
  local DEFAULT_OPEN_CMD=subl
  shift
  local OPEN_CMD=${@:-"$DEFAULT_OPEN_CMD"}
  local NUM_MATCHES=`eval $FIND_CMD | wc -l | egrep -o '[0-9]+'`
  if (( $NUM_MATCHES > 1 )) ;then
    echo Multiple results, pick one:
    echo
    I=0
    for MATCH_I in `eval $FIND_CMD` ;do
      I=$(( I + 1 ))
      echo
      echo $I\) "$MATCH_I"
    done
    echo
    echo
    local SHELL=`ps -p $$ | tail -1| awk '{print $NF}' | sed -e "s/^-//"`
    if [ $SHELL = 'zsh' ] ;then
      read "?pick a number: "
    else
      read -p "pick a number: "
    fi
    local SELECTED_INDEX=$REPLY

    local I=0
    for MATCH_I in `eval $FIND_CMD` ;do
      I=$(( I + 1 ))
      if [ $I = $SELECTED_INDEX ] ;then
          local MATCH=$MATCH_I
      fi
    done
  else
    local MATCH=`eval $FIND_CMD`
  fi
  echo opening "$MATCH"
  $OPEN_CMD "$MATCH"
}

opn () {
  local PATH_SUBSTR=$1
  shift
  __opn_internal "find -L . -name \"*$PATH_SUBSTR*\"" $@
}

opcd () {
  local PATH_SUBSTR=$1
  shift
  __opn_internal "find -L . -maxdepth 1 -name \"*$PATH_SUBSTR*\" -type d" cd $@
}
################################

################################
# System-specific configuration

JDK6_HOME=/Library/Java/JavaVirtualMachines/1.6.0_37-b06-434.jdk/Contents/Home/
JDK7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_60.jdk/Contents/Home/
JDK8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_11.jdk/Contents/Home/

################################







################################
# general helper functions

__ask_and_return() {
  local PROMPT_STRING="$1"
  local RETURN_PARAM="$2"
  
  local SHELL=`ps -p $$ | tail -1| awk '{print $NF}' | sed -e "s/^-//"`

  if [ $SHELL = 'zsh' ] ;then
    read "?$PROMPT_STRING"
  else
    read -p "$PROMPT_STRING"
  fi

  eval $RETURN_PARAM="$REPLY"
}
################################


################################
# grep aliases
alias g='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

histogram() {
  grep -h $* | sort | uniq -c | sort -nr
}
################################



################################
# less' stuff

# highlight support for less (requires source-highlight to be brew installed)
export LESSOPEN="| /usr/local/bin/src-hilite-lesspipe.sh %s"
export LESS=' -R '

alias les='less -S'

lest () { for f in `ls -tAp1 | grep -v "/$" | head -n ${1:-1}` ;do less -S "$f" ;done ; }
################################



################################
# some ls aliases
alias ls='ls -G' # color, the GNU way. The BSD way (non-GNU coreutils) is 'ls -G'
alias ll='ls -alFG'
alias la='ls -AG'
alias l='ls -CFG'
llth () {
  [ -z "$1" ] && {
    ll -t      | head -n 20
  } || {
    ll -t "$1" | head -n 20
  }
}
################################



################################
# Directory handling

alias ..='cd ..'
alias rmrf='rm -rf'

# move up directories quickly
up ()
{
  [ "$#" -eq 1 -a "$1" -gt 0 ] || { echo 'Usage: up <number of directories up>'; return 1; }

  up=""
  for (( i = 1; i <= $1; i++));
  do 
    up="$up../"
  done
  cd $up 
}

mkd() {
  mkdir "$1" &&
  cd "$1"
}
################################



################################
# some git/tig aliases

alias hlog='git log --date-order --all --graph --format="%C(green)%H %Creset%C(yellow)%an%Creset %C(blue bold)%ar%Creset %C(red bold)%d%Creset %s"'
function hlogh() { hlog $@ | head; }

alias xlog='git log --date-order --graph --format="%C(green)%h %Creset%C(yellow)%an%Creset %C(blue bold)%ar%Creset %C(red bold)%d%Creset %s"'
function xlogh() { xlog $@ | head; }

alias g-co='git checkout'
alias g-co-pr='git checkout @{-1}'
alias g-cm='git commit'
alias g-cm-a='git commit --amend'
alias g-df='git diff --color-words'
alias g-pl='git pull'
alias g-ps='git push --follow-tags'
alias g-sh='git show --color-words'
alias g-st='git stash'
alias g-st-p='git stash pop'
alias g-up='git stash && git pull && git stash pop'
alias g-mg='git merge'

g-cl() {
  local REPO_URL="$1"
  local REPO_BASENAME=`echo $REPO_URL | egrep -o '[^/.]*\.git$' | egrep -o '^[^.]*'`
  local FOLDER="${2:-$REPO_BASENAME}"

  git clone "$REPO_URL" "$FOLDER" && cd "$FOLDER"
}

g-cherry-to() {
  git checkout "$2" &&
  git cherry-pick "$1" &&
  g-co-pr
}

g-cpick-last-to() {
  local TARGET_BRANCH="$1"
  local LAST_HASH=`git log --date-order --format="%H" | head -n 1`
  local LAST_SUBJ="`git log --date-order --format="%s" | head -n 1`"

  g-cherry-to $LAST_HASH "$TARGET_BRANCH"
  local RESULT=$?
  
  [ $RESULT ] && echo -e "\n Cherry-picked commit \033[0;32m $LAST_SUBJ \033[0m to branch \033[0;32m $TARGET_BRANCH\033[0m\n"
  return $RESULT
}

alias t-s='tig status'
################################



################################
# some gradle aliases

alias gr='./gradlew'
alias gr-b='./gradlew build'
alias gr-bl='./gradlew build && ls -l build/libs'
alias gr-e='./gradlew eclipse'
alias gr-i='./gradlew idea'
alias gr-di='./gradlew dependencyInsight --dependency'
alias gr-ob='open build.gradle'
################################



################################
# npm
alias ns='npm start'
alias ni='npm install'
################################



################################
# search commands

function __f_args() {
  local ARG="$1"
  [[ "$ARG" = ^* ]] && local ARG=`echo "$ARG" | sed -e "s/.\(.*\)/\1/"` || local ARG="*$ARG" 
  [[ "$ARG" = *$ ]] && local ARG=`echo "$ARG" | sed -e "s/\(.*\)./\1/"` || local ARG="$ARG*"
  echo "*$ARG"
}
function f()   { find . -iname "`__f_args "$1"`"; }
function fll() { find . -iname "`__f_args "$1"`" -exec ls -ld {} \; ; }

################################



################################
# commands on list files

function fnddups() { cat $@ | sort | uniq -d; }

################################



################################
# Java symlinking


JDK_SYMLINK_PATH="${HOME}/java_home"

function relink_java_home() { rm -rf "$JDK_SYMLINK_PATH"; ln -s "$JAVA_HOME" "$JDK_SYMLINK_PATH"; }
function jdk6() { export JAVA_HOME="$JDK6_HOME"; relink_java_home; }
function jdk7() { export JAVA_HOME="$JDK7_HOME"; relink_java_home; }
function jdk8() { export JAVA_HOME="$JDK8_HOME"; relink_java_home; }


export JAVA_HOME="$JDK_SYMLINK_PATH"
#relink_java_home
export PATH=$JDK_SYMLINK_PATH/bin:$PATH

################################



################################
# python

alias pym='python -m '

pymh() {
  python -m $1 -h
  echo
  echo 'For more details, try running:'
  echo "pydoc $1"
}

alias webserve='python -m SimpleHTTPServer'


################################



################################
# misc

alias c='clear'

print_bar() {
  tput setab 2 &&
  for i in $(eval echo "{1..$(tput cols)}") ;do
    echo -n " "
  done
  tput sgr0
}

notify() {
  print_bar
}

alias dutop='du --max-depth 1 | sort -nr | head | cut -f 2 | xargs -I Q du -h --max-depth 0 Q'

alias wg='wget --no-check-certificate'

# Utility function to make random passwords
# from http://www.cyberciti.biz/faq/linux-random-password-generator/
genpasswd() {
  local len=$1
  if [[ $len == "" ]]; then
    len=16
  fi
  bash -c 'LC_CTYPE=C tr -dc "[:upper:][:lower:][:digit:]_" < /dev/urandom | head -c ${len} | xargs'
}

# Utility function to open the specified port
openport() {
  echo sudo iptables -A INPUT -p tcp --dport $1 -j ACCEPT
  sudo iptables -A INPUT -p tcp --dport $1 -j ACCEPT
}

sleep2() {
  TOT_SECS=$1
  while (( $TOT_SECS > 0 )) ;do
    HOURS=$(( TOT_SECS / 3600 ))
    HOURS_2CH=$(( HOURS / 10 ))$(( HOURS % 10 ))
    MINS=$(( TOT_SECS % 3600 / 60))
    MINS_2CH=$(( MINS / 10 ))$(( MINS % 10 ))
    SECS=$(( TOT_SECS % 60))
    SECS_2CH=$(( SECS / 10 ))$(( SECS % 10 ))

    echo -ne "countdown: $HOURS_2CH:$MINS_2CH:$SECS_2CH \033[O\r" >&2
    sleep 1
    (( TOT_SECS-- ))
  done
}

my_backup() {
  echo "Running   rsync -av --delete --progress \"$1\" \"$2\""
  echo ...
  rsync -av --delete --progress "$1" "$2"
}

shacheck() {
  cat "$1.sha1" && echo && sha1sum "$1"
}

md5all() {
  which md5 >/dev/null 2>&1 && {
    local MD5=md5
    local alias MD5_EXTRACT_REGEX='egrep -o "\S+$"'
  } || {
    local MD5=md5sum
    local alias MD5_EXTRACT_REGEX='egrep -o "^\S+"'
  }

  echo "md5 on file list (didn't check content) = `find . -type f | sort | $MD5`"

  __ask_and_return "continue? [default = y] :" REPLY
  REPLY=${REPLY:-"y"}
  if [ $REPLY = "y" ] || [ $REPLY = "Y" ] ;then
    echo
    echo "computing individual and recursive md5 checksums:"

    local EACH_FILE_WITH_MD5=`find . -type f | sort | xargs $MD5`
    echo "$EACH_FILE_WITH_MD5"
    echo
    echo "all-content-only md5 = `echo $EACH_FILE_WITH_MD5 | $MD5_EXTRACT_REGEX | $MD5`"
  fi
}

alias strace=dtruss

subl () {
  local DOS_PATH="`cygpath -d \"$1\"`"
  local SUBLIME_EXE_PATH="/cygdrive/c/Program Files/Sublime Text 3/sublime_text.exe"
  "$SUBLIME_EXE_PATH" "$DOS_PATH"
}

__opn_internal_replacing_MATCH () {
  local FIND_CMD="$1"
  local DEFAULT_OPEN_CMD='vim "$MATCH"'
  shift
  local OPEN_CMD=${@:-"$DEFAULT_OPEN_CMD"}

  local OLD_IFS=$OLD_IFS
  IFS=$'\n'

  local NUM_MATCHES=`eval $FIND_CMD | wc -l | egrep -o '[0-9]+'`
  if (( $NUM_MATCHES > 1 )) ;then
    echo Multiple results, pick one:
    echo
    I=0
    for MATCH_I in `eval $FIND_CMD` ;do
      I=$(( I + 1 ))
      echo
      echo $I\) "$MATCH_I"
    done
    echo
    echo
    __ask_and_return "pick a number: " SELECTED_INDEX

    local I=0
    for MATCH_I in `eval $FIND_CMD` ;do
      I=$(( I + 1 ))
      if [ $I = $SELECTED_INDEX ] ;then
          local MATCH=$MATCH_I
      fi
    done
  elif (( $NUM_MATCHES > 0 )) ;then
    local MATCH=`eval $FIND_CMD`
  else
    echo "No match found running '$FIND_CMD'"
    IFS=$OLD_IFS
    return 1
  fi
  IFS=$OLD_IFS
  local INTERPRETED_CMD=`eval "echo $OPEN_CMD"`
  echo "Running $INTERPRETED_CMD"
  eval $INTERPRETED_CMD
}

opn () {
  local PATH_SUBSTR=$1
  shift
  __opn_internal_replacing_MATCH "find -L . -name \"*$PATH_SUBSTR*\"" $1
}

opcd () {
  local PATH_SUBSTR=$1
  shift
  __opn_internal_replacing_MATCH "find -L . -maxdepth 1 -name \"*$PATH_SUBSTR*\" -type d" "cd \$MATCH" $@
}

check_port () {
  local PORT=$1
  echo
  nc -z localhost $PORT && {
    echo This process is listening on $PORT:
    echo
    lsof -i -P | grep $PORT.*LISTEN
  } ||
    echo Nothing is listening on $PORT
  echo
}

sanitize() {
  (( $# > 1 )) || {
    echo "Consistently replaces string regexes with <sanitized_\$RANDOM> in given file, saving output in <input>.sanitized"
    echo "String regexes to be replaced cannot contain whitespaces nor double quotes, and are used in a sed expression."
    echo
    echo "Params: <input> <space-separated-list-of-words-to-be-replaced>"
    return 1
  }

  local DEST="$1.sanitized.$RANDOM"
  local TEMP="$DEST.tmp"

  cp "$1" "$DEST"
  shift

  for unsafe in $* ;do
    cat "$DEST" | sed -e "s\"$unsafe\"<sanitized_$RANDOM>\"g" "$DEST" > "$TEMP"
    mv "$TEMP" "$DEST"
  done

  cat "$DEST"
  rm "$DEST" >/dev/null
}

################################
